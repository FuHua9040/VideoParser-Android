name: Build Android APK

on: [push]

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 180
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git zip unzip openjdk-11-jdk libncurses5 zlib1g-dev
        pip install buildozer cython==0.29.36
        echo "系统依赖安装完成"
        
    - name: Install Android SDK and NDK
      run: |
        echo "=== 开始安装 Android SDK 和 NDK ==="
        
        # 创建必要的目录
        mkdir -p ~/.android
        touch ~/.android/repositories.cfg
        
        # 下载并安装命令行工具
        echo "下载命令行工具..."
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
        unzip -q cmdline-tools.zip -d cmdline-tools
        mkdir -p ~/android-sdk/cmdline-tools
        mv cmdline-tools/cmdline-tools ~/android-sdk/cmdline-tools/latest
        rm cmdline-tools.zip
        
        # 设置环境变量
        echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
        echo "PATH=$HOME/android-sdk/cmdline-tools/latest/bin:$HOME/android-sdk/platform-tools:$PATH" >> $GITHUB_ENV
        echo "设置环境变量完成"
        
        # 接受许可证
        echo "接受许可证..."
        yes | ~/android-sdk/cmdline-tools/latest/bin/sdkmanager --licenses > /dev/null 2>&1
        
        # 安装必要的Android组件
        echo "安装平台工具和构建工具..."
        ~/android-sdk/cmdline-tools/latest/bin/sdkmanager --install "platform-tools" "platforms;android-33" "build-tools;34.0.0"
        
        # 安装NDK
        echo "下载NDK..."
        wget -q https://dl.google.com/android/repository/android-ndk-r25c-linux.zip
        unzip -q android-ndk-r25c-linux.zip -d ~/
        mv ~/android-ndk-r25c ~/android-ndk
        echo "ANDROID_NDK_HOME=$HOME/android-ndk" >> $GITHUB_ENV
        echo "PATH=$HOME/android-ndk:$PATH" >> $GITHUB_ENV
        
        echo "Android SDK 和 NDK 安装完成"
        
    - name: Verify Android tools
      run: |
        echo "=== 验证Android工具 ==="
        echo "AIDL 版本:"
        $HOME/android-sdk/build-tools/34.0.0/aidl --version || echo "AIDL 验证失败"
        echo "ADB 版本:"
        $HOME/android-sdk/platform-tools/adb --version || echo "ADB 验证失败"
        echo "SDK 管理器:"
        $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --list || echo "SDK 管理器验证失败"
        
    - name: Configure Buildozer
      run: |
        echo "=== 配置 Buildozer ==="
        
        # 创建Buildozer目录结构
        mkdir -p ~/.buildozer
        
        # 创建本地配置文件
        echo "[app]" > ~/.buildozer/default.cfg
        echo "android.sdk_path = $HOME/android-sdk" >> ~/.buildozer/default.cfg
        echo "android.ndk_path = $HOME/android-ndk" >> ~/.buildozer/default.cfg
        echo "android.arch = arm64-v8a" >> ~/.buildozer/default.cfg
        echo "p4a.branch = master" >> ~/.buildozer/default.cfg
        
        echo "Buildozer 配置完成"
        
    - name: Build APK (优化版)
      run: |
        echo "=== 开始构建 APK ==="
        
        # 删除现有的构建目录
        rm -rf .buildozer bin
        
        # 使用详细模式构建
        buildozer -v android clean
        buildozer -v android release || {
            echo "构建失败，保存日志..."
            # 查找并显示错误日志
            find .buildozer -name "*.log" -exec cat {} \;
            exit 1
        }
        
        # 复制生成的APK
        cp bin/*.apk .
        echo "APK构建成功"
        
    - name: Upload APK
      if: success()  # 只有构建成功才上传
      uses: actions/upload-artifact@v4
      with:
        name: videoparser-apk
        path: |
          *.apk
          
    - name: Upload Build Logs
      if: failure()  # 只有构建失败才上传日志
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          .buildozer/**/*.log
